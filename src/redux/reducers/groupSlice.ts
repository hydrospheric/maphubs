import { createSlice, PayloadAction } from '@reduxjs/toolkit'

// used by the create group wizard to support returning to a previous step
export interface GroupState {
  group_id?: string
  created?: boolean
  hasImage?: boolean
}

const initialState: GroupState = {}

export const groupSlice = createSlice({
  name: 'group',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    setGroupID: (state, action: PayloadAction<string>) => {
      state.group_id = action.payload
    },
    setGroupCreated: (state, action: PayloadAction<boolean>) => {
      state.created = action.payload
    },
    setGroupHasImage: (state, action: PayloadAction<boolean>) => {
      state.hasImage = action.payload
    },
    resetGroup: (state) => {
      state.hasImage = false
      state.created = false
      state.group_id = undefined
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    return
  }
})

export const { setGroupID, setGroupCreated, setGroupHasImage, resetGroup } =
  groupSlice.actions

export default groupSlice.reducer
