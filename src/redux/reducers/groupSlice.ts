import { createSlice, PayloadAction } from '@reduxjs/toolkit'
import { Group } from '../../types/group'

import type { AppState } from '../store'

export interface GroupState {
  group: Group
  members: Array<Record<string, any>>
  layers?: Array<Record<string, any>>
}

const initialState = {}

export const groupSlice = createSlice({
  name: 'group',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    changeGroup: (state, action: PayloadAction<string>) => {
      state.value = action.payload
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    return
  }
})

export const { changeGroup } = groupSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectGroup = (state: AppState): string => state.group.value

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default groupSlice.reducer
