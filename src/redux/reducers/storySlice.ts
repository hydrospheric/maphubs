import { createSlice, PayloadAction } from '@reduxjs/toolkit'
import { LocalizedString } from '../../types/LocalizedString'
import localeUtils from '../../locales/util'
import moment from 'moment'

// used by the create story wizard to support returning to a previous step
export interface StoryState {
  title?: LocalizedString
  author?: LocalizedString
  body?: LocalizedString
  summary?: LocalizedString
  story_id?: number
  published?: boolean
  published_at?: string
  owned_by_group_id?: string
  tags?: Array<string>
  modified?: boolean
  canChangeGroup?: boolean
}

const initialState: StoryState = {
  title: localeUtils.getEmptyLocalizedString(),
  author: localeUtils.getEmptyLocalizedString(),
  body: localeUtils.getEmptyLocalizedString(),
  modified: false,
  canChangeGroup: false
}

export const storySlice = createSlice({
  name: 'story',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    initStory: (state, action: PayloadAction<StoryState>) => {
      for (const key of Object.keys(action.payload)) {
        state[key] = action.payload[key]
      }
      state.canChangeGroup = !action.payload.owned_by_group_id
      if (!action.payload.published_at) {
        state.published_at = moment().startOf('day').format()
      }
    },
    bodyChange: (
      state,
      action: PayloadAction<{ lang: string; update: string }>
    ) => {
      const { lang, update } = action.payload
      const body = state.body || {}
      body[lang] = update
      state.body = body
      state.modified = true
    },
    titleChange: (state, action: PayloadAction<{ title: LocalizedString }>) => {
      state.title = action.payload.title
      state.modified = true
    },
    publishDateChange: (state, action: PayloadAction<{ date: any }>) => {
      state.published_at = action.payload.date.format()
      state.modified = true
    },
    togglePublished: (state, action: PayloadAction<{ published: boolean }>) => {
      state.published = action.payload.published
      state.modified = true
    },
    authorChange: (state, action: PayloadAction<{ author: any }>) => {
      state.author = action.payload.author
      state.modified = true
    },
    summaryChange: (state, action: PayloadAction<{ summary: any }>) => {
      state.summary = action.payload.summary
      state.modified = true
    },
    groupChange: (
      state,
      action: PayloadAction<{ owned_by_group_id: string }>
    ) => {
      state.owned_by_group_id = action.payload.owned_by_group_id
      state.modified = true
    },
    tagsChange: (state, action: PayloadAction<{ tags: Array<string> }>) => {
      state.tags = action.payload.tags
      state.modified = true
    },
    setModified: (state, action: PayloadAction<{ modified: boolean }>) => {
      state.modified = action.payload.modified
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    return
  }
})

export const {
  initStory,
  bodyChange,
  titleChange,
  publishDateChange,
  togglePublished,
  authorChange,
  summaryChange,
  groupChange,
  tagsChange,
  setModified
} = storySlice.actions

export default storySlice.reducer
