import Layer from '../../models/layer'
import login from 'connect-ensure-login'
import Group from '../../models/group'
import Map from '../../models/map'
import multer from 'multer'
import local from '../../local'
import DebugService from '@bit/kriscarle.maphubs-utils.maphubs-utils.debug'
import {
  apiError,
  nextError,
  apiDataError,
  notAllowedError
} from '../../services/error-response'
import isAuthenticated from '../../services/auth-check'
import { geobuf } from '@bit/kriscarle.maphubs-utils.maphubs-utils.importers'
import _endsWith from 'lodash.endswith'
import log from '@bit/kriscarle.maphubs-utils.maphubs-utils.log'
import knex from '../../connection'
import shortid from 'shortid'
import replaceShortID from '../../components/Map/Styles/replaceShortID'
import DataLoadUtils from '../../services/data-load-utils'
import layerViews from '../../services/layer-views'
import pageOptions from '../../services/page-options-helper'
import Promise from 'bluebird'
import csurf from 'csurf'

const csrfProtection = csurf({
  cookie: false
})

const debug = DebugService('routes/layers-import')

export default function (app: any) {
  app.get(
    '/import',
    login.ensureLoggedIn(),
    csrfProtection,
    async (req, res, next) => {
      try {
        const user_id = req.session.user.maphubsUser.id
        return app.next.render(
          req,
          res,
          '/importlayer',
          await pageOptions(req, {
            title: req.__('Import') + ' - ' + local.productName,
            props: {
              groups: await Group.getGroupsForUser(user_id)
            }
          })
        )
      } catch (err) {
        nextError(next)(err)
      }
    }
  )
  app.post(
    '/api/import/:group_id/upload',
    isAuthenticated,
    multer({
      dest: local.tempFilePath + '/uploads/'
    }).single('file'),
    async (req, res) => {
      try {
        const group_id = req.params.group_id
        debug.log('adding to group: ' + group_id)

        if (group_id) {
          if (await Group.allowedToModify(group_id, req.user_id)) {
            debug.log('Filename: ' + req.file.originalname)
            debug.log('Mimetype: ' + req.file.mimetype)

            if (_endsWith(req.file.originalname, '.maphubs')) {
              const importerResult = await geobuf(req.file.path, -1)
              const maphubsFile = importerResult.maphubs
              delete importerResult.maphubs
              log.info(
                `MapHubs File v${maphubsFile.version} - Generated by ${maphubsFile.host}(${maphubsFile.systemVersion}) at ${maphubsFile.exportTime} `
              )

              if (maphubsFile.version === 3 && maphubsFile.type === 'map') {
                // Map import support, added in version 3
                const mapHubsMap = maphubsFile.map
                console.log(mapHubsMap)
                // First extract and create the layers
                // using the old short-ids, pull out the layers and their features
                const layerMap = {}
                for (const layer of maphubsFile.layers) {
                  layerMap[layer.shortid] = layer
                  layerMap[layer.shortid].geojson = {
                    type: 'FeatureCollection',
                    features: []
                  }
                }
                for (const feature of importerResult.features) {
                  const shortid = feature.layer_short_id

                  if (shortid && layerMap[shortid]) {
                    layerMap[shortid].geojson.features.push(feature)
                  } else {
                    console.error(`Failed to find layer with id: ${shortid}`)
                  }
                }
                // now create each layer
                knex.transaction(async (trx) => {
                  const keys = Object.keys(layerMap)
                  const layersList = []
                  await Promise.mapSeries(keys, async (old_short_id) => {
                    const maphubsLayer = layerMap[old_short_id]
                    const presets = maphubsLayer.presets
                    // replace shortid
                    const newId = shortid.generate()
                    maphubsLayer.shortid = newId
                    maphubsLayer.style = replaceShortID(
                      old_short_id,
                      newId,
                      maphubsLayer.style
                    )
                    // also update the map style
                    mapHubsMap.style = replaceShortID(
                      old_short_id,
                      newId,
                      mapHubsMap.style
                    )
                    // create the layer
                    const layerGeoJSON = maphubsLayer.geojson
                    // layers imported from Maps may have these
                    delete maphubsLayer.default_style
                    delete maphubsLayer.default_labels
                    delete maphubsLayer.default_legend_html
                    delete maphubsLayer.default_settings
                    delete maphubsLayer.geojson
                    delete maphubsLayer.map_id
                    delete maphubsLayer.position
                    delete maphubsLayer.short_id // some FR layers have this

                    // imports from FR may not have all metadata
                    if (!maphubsLayer.description)
                      maphubsLayer.description = maphubsLayer.title
                    if (!maphubsLayer.license) maphubsLayer.license = 'none'
                    if (!maphubsLayer.status) maphubsLayer.status = 'published'
                    maphubsLayer.published = true
                    // assign this user
                    maphubsLayer.created_by_user_id = req.user_id
                    maphubsLayer.creation_time = trx.raw('now()')
                    const layer_id = await Layer.importLayer(
                      maphubsLayer,
                      group_id,
                      req.user_id,
                      trx
                    )
                    maphubsLayer.layer_id = layer_id
                    console.log(`created layer ${layer_id}`)

                    // insert layer data, if provided
                    if (layerGeoJSON.features.length > 0) {
                      await DataLoadUtils.storeTempGeoJSON(
                        layerGeoJSON,
                        req.file.path,
                        layer_id,
                        maphubsLayer.shortid,
                        false,
                        false,
                        trx
                      )
                      await DataLoadUtils.loadTempData(layer_id, trx)
                      await layerViews.createLayerViews(layer_id, presets, trx)
                      debug.log('data load transaction complete')
                    }

                    layersList.push(maphubsLayer)
                    return Layer.setComplete(layer_id, trx)
                  })
                  // now create the map
                  const map_id = await Map.createGroupMap(
                    layersList,
                    mapHubsMap.style,
                    mapHubsMap.basemap,
                    mapHubsMap.position,
                    mapHubsMap.title,
                    mapHubsMap.settings,
                    req.user_id,
                    group_id,
                    false,
                    trx
                  )
                  return res.status(200).send({
                    success: true,
                    type: 'map',
                    map_id
                  })
                })
              } else if (
                maphubsFile?.version <= 2 ||
                maphubsFile?.type === 'layer'
              ) {
                // Version 2 only supports layers
                const maphubsLayer = maphubsFile.layer
                const presets = maphubsLayer.presets
                // replace shortid
                const newId = shortid.generate()
                const oldId = maphubsLayer.shortid
                maphubsLayer.shortid = newId
                maphubsLayer.style = replaceShortID(
                  oldId,
                  newId,
                  maphubsLayer.style
                )
                return knex.transaction(async (trx) => {
                  // create the layer
                  const layer_id = await Layer.importLayer(
                    maphubsLayer,
                    group_id,
                    req.user_id,
                    trx
                  )

                  // insert layer data, if provided
                  if (importerResult.features.length > 0) {
                    await DataLoadUtils.storeTempGeoJSON(
                      importerResult,
                      req.file.path,
                      layer_id,
                      maphubsLayer.shortid,
                      false,
                      false,
                      trx
                    )
                    await DataLoadUtils.loadTempData(layer_id, trx)
                    await layerViews.createLayerViews(layer_id, presets, trx)
                    debug.log('data load transaction complete')
                  }

                  await Layer.setComplete(layer_id, trx)
                  return res.status(200).send({
                    success: true,
                    type: 'layer',
                    layer_id
                  })
                })
              } else {
                throw new Error('Unsupported MapHubs file format')
              }
            } else {
              // only .maphubs files supported
              throw new Error('MapHubs File Not Found')
            }
          } else {
            return notAllowedError(res, 'layer')
          }
        } else {
          apiDataError(res)
        }
      } catch (err) {
        apiError(res, 500)(err)
      }
    }
  )
}
