import { createSlice, PayloadAction } from '@reduxjs/toolkit'
import mapboxgl from 'mapbox-gl'
import type { AppState } from '../store'

import { setOverlayStyleThunk } from './map/setOverlayStyleThunk'
import { setBaseMapStyleThunk } from './map/setBaseMapStyleThunk'

export interface MapState {
  mapboxMap?: mapboxgl.Map
  insetMapboxMap?: mapboxgl.Map
  enableMeasurementTools?: boolean
  measurementMessage?: string
  interactiveLayers: string[]
  interactionBufferSize: number
  glStyle?: mapboxgl.Style
  overlayMapStyle?: mapboxgl.Style
  allowLayersToMoveMap?: boolean
}

const initialState: MapState = {
  mapboxMap: undefined,
  insetMapboxMap: undefined,
  enableMeasurementTools: false,
  measurementMessage: '',
  interactiveLayers: [],
  interactionBufferSize: 10,
  glStyle: undefined,
  overlayMapStyle: undefined
}

export const mapSlice = createSlice({
  name: 'map',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    initMap: (
      state,
      action: PayloadAction<{
        mapboxMap: MapState['mapboxMap']
        interactiveLayers: MapState['interactiveLayers']
        interactionBufferSize?: number
      }>
    ) => {
      for (const key of Object.keys(action.payload)) {
        state[key] = action.payload[key]
      }
    },

    setMap: (state, action: PayloadAction<{ map: MapState['mapboxMap'] }>) => {
      state.mapboxMap = action.payload.map
    },

    setInsetMap: (
      state,
      action: PayloadAction<{ insetMap: MapState['insetMapboxMap'] }>
    ) => {
      state.insetMapboxMap = action.payload.insetMap
    },

    setEnableMeasurementTools: (state, action: PayloadAction<boolean>) => {
      state.enableMeasurementTools = action.payload
    },

    setMeasurementMessage: (state, action: PayloadAction<string>) => {
      state.measurementMessage = action.payload
    },

    setAllowLayersToMoveMap: (state, action: PayloadAction<boolean>) => {
      state.allowLayersToMoveMap = action.payload
    },

    setInteractiveLayers: (state, action: PayloadAction<string[]>) => {
      state.interactiveLayers = action.payload
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(
      setOverlayStyleThunk.fulfilled,
      (
        state,
        action: PayloadAction<{
          overlayMapStyle: mapboxgl.Style
          glStyle: mapboxgl.Style
        }>
      ) => {
        const { overlayMapStyle, glStyle } = action.payload

        state.overlayMapStyle = overlayMapStyle
        state.glStyle = glStyle
      }
    )
    builder.addCase(
      setBaseMapStyleThunk.fulfilled,
      (
        state,
        action: PayloadAction<{
          glStyle: mapboxgl.Style
        }>
      ) => {
        const { glStyle } = action.payload

        state.glStyle = glStyle
      }
    )
    return
  }
})

export const {
  initMap,
  setMap,
  setInsetMap,
  setEnableMeasurementTools,
  setMeasurementMessage,
  setAllowLayersToMoveMap,
  setInteractiveLayers
} = mapSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectMapboxMap = (state: AppState): MapState['mapboxMap'] =>
  state.map.mapboxMap

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default mapSlice.reducer
